"use client";

import React, { useState } from "react";
import { Breadcrumb } from "@/components/ui/breadcrumb";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Toaster } from "@/components/ui/sonner";
import { toast } from "sonner";
import { FileUpload } from "./components/FileUpload";
import { JobDescription } from "./components/JobDescription";
import { ResumePreview } from "./components/ResumePreview";
import { CoverLetterPreview } from "./components/CoverLetterPreview";
import { PricingSection } from "./components/PricingSection";
import { FeaturesSection } from "./components/FeaturesSection";
import { HowItWorks } from "./components/HowItWorks";
import {
  ArrowRight,
  Upload,
  FileText,
  FileCheck,
  Download,
  Sparkles,
  Loader2,
} from "lucide-react";
import { useSession } from "next-auth/react";
import { jsPDF } from "jspdf";

export default function ApplyRight() {
  const { data: session, status } = useSession();
  const [activeTab, setActiveTab] = useState("upload");
  const [resumeFile, setResumeFile] = useState<File | null>(null);
  const [resumeText, setResumeText] = useState<string>("");
  const [jobDescription, setJobDescription] = useState("");
  const [transformedResume, setTransformedResume] = useState<string | null>(
    null
  );
  const [coverLetter, setCoverLetter] = useState<string | null>(null);
  const [changesMade, setChangesMade] = useState<string[]>([]);
  const [keywordsExtracted, setKeywordsExtracted] = useState<string[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);

  // Check if user is premium based on session
  const checkPremiumStatus = () => {
    if (status === "authenticated" && session?.user) {
      // This is where you would check if the user has a premium subscription
      // For now, we'll just check if they're logged in
      return true;
    }
    return false;
  };

  const handleResumeUpload = (file: File, text: string) => {
    setResumeFile(file);
    setResumeText(text);
    // Auto-advance to next tab
    setActiveTab("job-description");
  };

  const handleJobDescriptionSubmit = (description: string) => {
    setJobDescription(description);
    // Auto-advance to next tab
    setActiveTab("transform");
  };

  const handleTransformResume = async () => {
    setIsProcessing(true);

    try {
      // Call the API to transform the resume
      const response = await fetch("/api/apply-right/transform", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          resumeText,
          jobDescription,
          isPremiumUser: checkPremiumStatus(),
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to transform resume");
      }

      const data = await response.json();

      if (data.success) {
        setTransformedResume(data.transformedResume);
        setCoverLetter(data.coverLetter);
        setChangesMade(data.changesMade || []);
        setKeywordsExtracted(data.keywordsExtracted || []);

        // Auto-advance to next tab
        setActiveTab("results");

        // Show a different message if we're in fallback mode
        if (data.fallbackMode) {
          toast.warning(
            "AI service is currently unavailable. Using basic transformation instead."
          );
        } else {
          toast.success("Resume transformed successfully!");
        }
      } else {
        throw new Error(data.message || "Failed to transform resume");
      }
    } catch (error) {
      console.error("Error transforming resume:", error);
      toast.error(
        error instanceof Error ? error.message : "Failed to transform resume"
      );
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDownloadResume = () => {
    if (!transformedResume) return;

    // Create a new PDF document
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });

    // Set document properties
    doc.setProperties({
      title: "Professional Resume",
      subject: "Resume generated by ApplyRight",
      creator: "Synthalyst ApplyRight",
    });

    // Document margins and dimensions
    const margin = 15;
    const pageWidth = doc.internal.pageSize.getWidth();
    const contentWidth = pageWidth - margin * 2;

    // Extract candidate name from the resume (first few lines)
    const lines = transformedResume.split("\n");
    let candidateName = "Professional Resume";

    // Try to find the candidate name in the first few lines
    for (let i = 0; i < Math.min(5, lines.length); i++) {
      if (lines[i].includes("*[Candidate Name]*")) {
        candidateName = lines[i]
          .replace(/\*/g, "")
          .replace(/\[|\]/g, "")
          .trim();
        break;
      } else if (
        lines[i].includes("**") &&
        !lines[i].includes("|") &&
        !lines[i].includes("@")
      ) {
        candidateName = lines[i].replace(/\*/g, "").trim();
        break;
      }
    }

    // Set up the document with a professional header
    doc.setFillColor(245, 245, 245);
    doc.rect(0, 0, pageWidth, 35, "F");

    // Add candidate name as header
    doc.setTextColor(40, 40, 40);
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text(candidateName, pageWidth / 2, 15, { align: "center" });

    // Add contact information
    let contactInfo = "";
    for (let i = 0; i < Math.min(10, lines.length); i++) {
      if (
        lines[i].includes("|") ||
        (lines[i].includes("[") && lines[i].includes("]"))
      ) {
        contactInfo = lines[i].replace(/\[|\]/g, "").trim();
        break;
      }
    }

    if (contactInfo) {
      doc.setFontSize(10);
      doc.setTextColor(80, 80, 80);
      doc.text(contactInfo, pageWidth / 2, 25, { align: "center" });
    }

    // Add a subtle line under the header
    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.5);
    doc.line(margin, 35, pageWidth - margin, 35);

    // Process the resume content
    let yPosition = 45;
    let inBulletList = false;
    let currentSection = "";

    // Process line by line for better control
    lines.forEach((line, index) => {
      // Skip the first few lines that we already processed (name and contact)
      if (
        index < 5 &&
        (line.includes("*") || line.includes("|") || line.trim() === "")
      ) {
        return;
      }

      // Check if we need a new page
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }

      // Handle section headers (marked with asterisks or starting with #)
      if (
        (line.includes("**") && line.trim().length < 50) ||
        line.startsWith("# ") ||
        line.startsWith("## ")
      ) {
        // Add extra space before new sections
        yPosition += 5;

        // Clean up the section title
        currentSection = line.replace(/\*/g, "").replace(/^#+ /, "").trim();

        // Style the section header
        doc.setFont("helvetica", "bold");
        doc.setFontSize(12);
        doc.setTextColor(40, 40, 40);

        // Add a background for the section header
        doc.setFillColor(245, 245, 245);
        doc.rect(margin, yPosition - 4, contentWidth, 8, "F");

        // Add the section text
        doc.text(currentSection, margin, yPosition);

        // Add a subtle line under the section header
        doc.setDrawColor(180, 180, 180);
        doc.setLineWidth(0.3);
        doc.line(margin, yPosition + 2, pageWidth - margin, yPosition + 2);

        yPosition += 8;
        inBulletList = false;
        return;
      }

      // Handle bullet points
      if (
        line.trim().startsWith("•") ||
        line.trim().startsWith("-") ||
        line.trim().startsWith("*")
      ) {
        // Clean up the bullet text by removing the bullet character
        const bulletText = line.trim().substring(1).trim();

        // Determine indentation level based on leading spaces
        const indentMatch = line.match(/^\s+/);
        const indentLevel = indentMatch
          ? Math.floor(indentMatch[0].length / 2)
          : 0;
        const bulletIndent = margin + indentLevel * 4;

        // Style for bullet points
        doc.setFont("helvetica", "normal");
        doc.setFontSize(10);
        doc.setTextColor(60, 60, 60);

        // Draw the bullet
        doc.setFont("helvetica", "bold");
        doc.text("•", bulletIndent, yPosition);
        doc.setFont("helvetica", "normal");

        // Wrap the text with proper indentation
        const textLines = doc.splitTextToSize(
          bulletText,
          contentWidth - (bulletIndent - margin) - 5
        );
        doc.text(textLines, bulletIndent + 4, yPosition);

        // Move position based on number of wrapped lines
        yPosition += 5 * textLines.length;
        inBulletList = true;
        return;
      }

      // Handle company or position lines (often have dates)
      if (
        (line.includes("Ltd") ||
          line.includes("Inc") ||
          line.includes("LLC") ||
          (line.includes("-") &&
            (line.includes("20") || line.includes("19")))) &&
        line.trim().length < 100
      ) {
        // Add spacing if coming from a bullet list
        if (inBulletList) {
          yPosition += 2;
          inBulletList = false;
        }

        // Style for company/position
        doc.setFont("helvetica", "bold");
        doc.setFontSize(11);
        doc.setTextColor(40, 40, 40);

        const textLines = doc.splitTextToSize(line.trim(), contentWidth);
        doc.text(textLines, margin, yPosition);

        yPosition += 5 * textLines.length;
        return;
      }

      // Handle empty lines
      if (line.trim() === "") {
        yPosition += 2;
        return;
      }

      // Regular text - check if it's part of a summary section
      const isSummary =
        currentSection.toLowerCase().includes("summary") ||
        currentSection.toLowerCase().includes("profile");

      // Style for regular text
      doc.setFont("helvetica", "normal");
      doc.setFontSize(10);
      doc.setTextColor(
        isSummary ? 80 : 60,
        isSummary ? 80 : 60,
        isSummary ? 80 : 60
      );

      // Wrap and add the text
      const textLines = doc.splitTextToSize(line.trim(), contentWidth);
      doc.text(textLines, margin, yPosition);

      // Move position based on number of wrapped lines
      yPosition += 4.5 * textLines.length;
    });

    // Add footer with page numbers
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(9);
      doc.setTextColor(150);
      doc.text(`Page ${i} of ${pageCount}`, pageWidth / 2, 285, {
        align: "center",
      });
    }

    // Save the PDF with the candidate's name if available
    const filename =
      candidateName !== "Professional Resume"
        ? `${candidateName.replace(/\s+/g, "_")}_Resume.pdf`
        : "Professional_Resume.pdf";

    doc.save(filename);

    toast.success("Resume downloaded as PDF successfully!");
  };

  const handleDownloadCoverLetter = () => {
    if (!coverLetter) return;

    // Create a new PDF document
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });

    // Set document properties
    doc.setProperties({
      title: "Professional Cover Letter",
      subject: "Cover Letter generated by ApplyRight",
      creator: "Synthalyst ApplyRight",
    });

    // Document margins and dimensions
    const margin = 25; // Wider margins for a formal letter
    const pageWidth = doc.internal.pageSize.getWidth();
    const contentWidth = pageWidth - margin * 2;

    // Split the cover letter into lines
    const lines = coverLetter.split("\n");

    // Extract sender information (usually at the top)
    let senderName = "";
    const senderInfo = [];
    const recipientInfo = [];
    let dateInfo = "";
    let contentStartIndex = 0;

    // Process the header section to extract sender, recipient, and date
    for (let i = 0; i < Math.min(20, lines.length); i++) {
      const line = lines[i].trim();

      // Skip empty lines
      if (line === "") continue;

      // Try to find the sender's name (usually the first non-empty line)
      if (
        !senderName &&
        line.length > 0 &&
        !line.includes("*") &&
        !line.includes("[")
      ) {
        senderName = line;
        continue;
      }

      // Collect sender contact information
      if (
        senderName &&
        senderInfo.length < 3 &&
        !line.includes("*") &&
        !line.includes("[")
      ) {
        senderInfo.push(line);
        continue;
      }

      // Try to find the date (usually contains numbers and months)
      if (
        !dateInfo &&
        (line.match(/\b\d{1,2}(st|nd|rd|th)?\b/) ||
          line.match(
            /\b(January|February|March|April|May|June|July|August|September|October|November|December)\b/
          ) ||
          line.match(/\b\d{1,2}\/\d{1,2}\/\d{2,4}\b/))
      ) {
        dateInfo = line.replace(/\*/g, "").trim();
        continue;
      }

      // Collect recipient information (usually after sender info and before greeting)
      if (
        senderInfo.length > 0 &&
        !line.startsWith("Dear") &&
        !line.includes("*") &&
        line !== ""
      ) {
        recipientInfo.push(line);
        continue;
      }

      // Find where the actual content starts (usually with "Dear" or a greeting)
      if (
        line.startsWith("Dear") ||
        line.includes("Dear") ||
        line.includes("To Whom")
      ) {
        contentStartIndex = i;
        break;
      }
    }

    // Set up the document with a professional header
    let yPosition = 30;

    // Add sender information at the top
    doc.setFont("helvetica", "bold");
    doc.setFontSize(12);
    doc.setTextColor(40, 40, 40);

    if (senderName) {
      doc.text(senderName, margin, yPosition);
      yPosition += 6;
    }

    // Add sender contact details
    doc.setFont("helvetica", "normal");
    doc.setFontSize(10);
    doc.setTextColor(60, 60, 60);

    senderInfo.forEach((info) => {
      doc.text(info, margin, yPosition);
      yPosition += 5;
    });

    // Add some space after sender info
    yPosition += 10;

    // Add date
    if (dateInfo) {
      doc.text(dateInfo, margin, yPosition);
      yPosition += 10;
    } else {
      // Add current date if no date found
      const today = new Date();
      const formattedDate = today.toLocaleDateString("en-US", {
        month: "long",
        day: "numeric",
        year: "numeric",
      });
      doc.text(formattedDate, margin, yPosition);
      yPosition += 10;
    }

    // Add recipient information
    doc.setFont("helvetica", "normal");
    recipientInfo.forEach((info) => {
      doc.text(info, margin, yPosition);
      yPosition += 5;
    });

    // Add space after recipient info
    yPosition += 10;

    // Process the cover letter content
    let inGreeting = false;
    let inClosing = false;
    let paragraphStart = true;

    // Process line by line for better control
    for (let i = contentStartIndex; i < lines.length; i++) {
      const line = lines[i].trim();

      // Check if we need a new page
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 30;
      }

      // Skip empty lines but mark paragraph start
      if (line === "") {
        yPosition += 5;
        paragraphStart = true;
        continue;
      }

      // Detect greeting (usually starts with "Dear")
      if (line.startsWith("Dear") || line.includes("To Whom")) {
        doc.setFont("helvetica", "normal");
        doc.setFontSize(11);
        doc.setTextColor(40, 40, 40);
        doc.text(line, margin, yPosition);
        yPosition += 10;
        inGreeting = true;
        continue;
      }

      // Detect closing (usually "Sincerely", "Best regards", etc.)
      if (
        line.match(
          /^(Sincerely|Best regards|Regards|Yours truly|Respectfully|Thank you)/i
        )
      ) {
        // Add extra space before closing
        yPosition += 5;
        doc.setFont("helvetica", "normal");
        doc.setFontSize(11);
        doc.setTextColor(40, 40, 40);
        doc.text(line, margin, yPosition);
        inClosing = true;
        yPosition += 15; // Space for signature
        continue;
      }

      // Handle signature after closing
      if (inClosing) {
        doc.setFont("helvetica", "bold");
        doc.setFontSize(11);
        doc.text(senderName || "Applicant Name", margin, yPosition);
        inClosing = false;
        continue;
      }

      // Regular paragraphs
      doc.setFont("helvetica", "normal");
      doc.setFontSize(11);
      doc.setTextColor(40, 40, 40);

      // Wrap and add the text
      const textLines = doc.splitTextToSize(line, contentWidth);

      // Add paragraph indentation for paragraph starts
      if (paragraphStart && !inGreeting) {
        doc.text(textLines, margin, yPosition);
      } else {
        doc.text(textLines, margin, yPosition);
      }

      // Move position based on number of wrapped lines
      yPosition += 6 * textLines.length;
      paragraphStart = false;
    }

    // Add footer with page numbers
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(9);
      doc.setTextColor(150);
      doc.text(`Page ${i} of ${pageCount}`, pageWidth / 2, 285, {
        align: "center",
      });
    }

    // Save the PDF with the sender's name if available
    const filename = senderName
      ? `${senderName.replace(/\s+/g, "_")}_Cover_Letter.pdf`
      : "Professional_Cover_Letter.pdf";

    doc.save(filename);

    toast.success("Cover Letter downloaded as PDF successfully!");
  };

  const handleSignIn = () => {
    window.location.href = "/api/auth/signin";
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <Toaster position="top-right" />

      <div className="max-w-7xl mx-auto space-y-8">
        <Breadcrumb
          items={[
            { label: "Home", href: "/" },
            { label: "Tools", href: "/tools" },
            { label: "ApplyRight", href: "/apply-right", active: true },
          ]}
        />

        <div className="text-center space-y-4 mb-8">
          <h1 className="text-4xl font-bold tracking-tight">ApplyRight</h1>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Transform your resume with professional enhancements and targeted
            optimizations for your dream job.
          </p>
          <div>
            {status === "authenticated" ? (
              <Badge
                variant="outline"
                className="bg-green-50 text-green-700 border-green-200"
              >
                Premium Features Available
              </Badge>
            ) : (
              <Button variant="outline" onClick={handleSignIn} className="mt-2">
                Sign in for Premium Features
              </Button>
            )}
          </div>
        </div>

        <Tabs
          value={activeTab}
          onValueChange={setActiveTab}
          className="space-y-6"
        >
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="upload" disabled={isProcessing}>
              <Upload className="h-4 w-4 mr-2" />
              Upload
            </TabsTrigger>
            <TabsTrigger
              value="job-description"
              disabled={!resumeFile || isProcessing}
            >
              <FileText className="h-4 w-4 mr-2" />
              Job Description
            </TabsTrigger>
            <TabsTrigger
              value="transform"
              disabled={!resumeFile || isProcessing}
            >
              <Sparkles className="h-4 w-4 mr-2" />
              Transform
            </TabsTrigger>
            <TabsTrigger
              value="results"
              disabled={!transformedResume || isProcessing}
            >
              <FileCheck className="h-4 w-4 mr-2" />
              Results
            </TabsTrigger>
          </TabsList>

          <TabsContent value="upload" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Upload Your Resume</CardTitle>
                <CardDescription>
                  Upload your current resume in PDF, DOC, DOCX, or TXT format
                </CardDescription>
              </CardHeader>
              <CardContent>
                <FileUpload onFileUpload={handleResumeUpload} />
              </CardContent>
              <CardFooter className="flex justify-between">
                <p className="text-sm text-muted-foreground">
                  Max file size: 5MB
                </p>
                <Button
                  onClick={() => setActiveTab("job-description")}
                  disabled={!resumeFile}
                >
                  Next
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="job-description" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Add Job Description</CardTitle>
                <CardDescription>
                  Paste the job description to tailor your resume (optional)
                </CardDescription>
              </CardHeader>
              <CardContent>
                <JobDescription
                  value={jobDescription}
                  onChange={setJobDescription}
                  onSubmit={handleJobDescriptionSubmit}
                />
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button
                  variant="outline"
                  onClick={() => setActiveTab("upload")}
                >
                  Back
                </Button>
                <Button onClick={() => setActiveTab("transform")}>
                  Next
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="transform" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Transform Your Resume</CardTitle>
                <CardDescription>
                  Enhance your resume with professional improvements
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="bg-muted p-4 rounded-md">
                  <h3 className="font-medium mb-2">Ready to transform:</h3>
                  <div className="text-sm flex items-center">
                    {resumeFile?.name}{" "}
                    <Badge variant="outline" className="ml-2">
                      {resumeFile?.type.split("/")[1].toUpperCase()}
                    </Badge>
                  </div>
                  {jobDescription && (
                    <div className="mt-2">
                      <p className="text-sm font-medium">Job description:</p>
                      <p className="text-xs text-muted-foreground">
                        {jobDescription.substring(0, 100)}...
                      </p>
                    </div>
                  )}
                </div>

                <div className="flex flex-col items-center justify-center py-4">
                  <Button
                    size="lg"
                    onClick={handleTransformResume}
                    disabled={isProcessing || !resumeFile}
                    className="w-full max-w-xs"
                  >
                    {isProcessing ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Processing...
                      </>
                    ) : (
                      <>
                        <Sparkles className="mr-2 h-4 w-4" />
                        Transform Resume
                      </>
                    )}
                  </Button>
                  <p className="text-xs text-muted-foreground mt-2">
                    This may take a few moments
                  </p>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button
                  variant="outline"
                  onClick={() => setActiveTab("job-description")}
                  disabled={isProcessing}
                >
                  Back
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="results" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    Transformed Resume
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleDownloadResume}
                      disabled={!transformedResume}
                    >
                      <Download className="mr-2 h-4 w-4" />
                      Download PDF
                    </Button>
                  </CardTitle>
                  <CardDescription>
                    Your professionally enhanced resume ready to download as a
                    PDF
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ResumePreview content={transformedResume || ""} />
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    Cover Letter
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleDownloadCoverLetter}
                      disabled={!coverLetter}
                    >
                      <Download className="mr-2 h-4 w-4" />
                      Download PDF
                    </Button>
                  </CardTitle>
                  <CardDescription>
                    Your tailored cover letter ready to download as a PDF
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <CoverLetterPreview content={coverLetter || ""} />
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>Improvements Made</CardTitle>
                <CardDescription>
                  Key enhancements applied to your resume
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h3 className="font-medium mb-2">Changes Made:</h3>
                    <ul className="list-disc pl-5 space-y-1">
                      {changesMade.map((change, index) => (
                        <li key={index} className="text-sm">
                          {change}
                        </li>
                      ))}
                    </ul>
                  </div>
                  {keywordsExtracted.length > 0 && (
                    <div>
                      <h3 className="font-medium mb-2">
                        Keywords from Job Description:
                      </h3>
                      <div className="flex flex-wrap gap-2">
                        {keywordsExtracted.map((keyword, index) => (
                          <Badge key={index} variant="secondary">
                            {keyword}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter>
                <Button
                  variant="outline"
                  onClick={() => setActiveTab("transform")}
                >
                  Back
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>
        </Tabs>

        <div className="space-y-12 mt-12">
          <HowItWorks />
          <FeaturesSection />
          <PricingSection
            isPremium={status === "authenticated"}
            onUpgrade={handleSignIn}
          />
        </div>
      </div>
    </div>
  );
}
