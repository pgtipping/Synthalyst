generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String                @id @default(cuid())
  name            String?
  email           String                @unique
  emailVerified   DateTime?
  image           String?
  role            String                @default("user")
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  password        String?
  accounts        Account[]
  sessions        Session[]
  chatMessages    ChatMessage[]
  comments        Comment[]
  competencies    CompetencyFramework[]
  documents       Document[]
  jobDescriptions JobDescription[]
  learningContent LearningContent[]
  payments        Payment[]
  posts           Post[]
  profile         Profile?
  subscriptions   Subscription[]
  supportTickets  SupportTicket[]
  tasks           Task[]
  templates       Template[]
  trainingPlans   TrainingPlan[]
  preferences     UserPreferences?
  competencyMatrices CompetencyMatrix[]
}

model Profile {
  id        String   @id @default(cuid())
  bio       String?
  company   String?
  position  String?
  website   String?
  location  String?
  skills    String[]
  interests String[]
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id            String   @id @default(cuid())
  theme         String   @default("light")
  notifications Boolean  @default(true)
  language      String   @default("en")
  userId        String   @unique
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id         String     @id @default(cuid())
  title      String
  slug       String     @unique
  content    String
  excerpt    String?
  coverImage String?
  published  Boolean    @default(false)
  featured   Boolean    @default(false)
  views      Int        @default(0)
  likes      Int        @default(0)
  authorId   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  comments   Comment[]
  author     User       @relation(fields: [authorId], references: [id])
  categories Category[] @relation("CategoryToPost")
  tags       Tag[]      @relation("PostToTag")
  Post_A     Post[]     @relation("RelatedPosts")
  Post_B     Post[]     @relation("RelatedPosts")

  @@index([authorId])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]   @relation("CategoryToPost")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToTag")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  authorId  String
  postId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([postId])
  @@index([parentId])
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  type        String
  format      String
  downloadUrl String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  category    String
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model JobDescription {
  id          String             @id @default(cuid())
  title       String
  content     String
  industry    String?
  level       String?
  skills      String[]
  userId      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  contentHash String
  isLatest    Boolean            @default(true)
  parentId    String?
  version     Int                @default(1)
  canonicalId String?
  canonical   JobDescription?    @relation("DuplicateGroup", fields: [canonicalId], references: [id])
  duplicates  JobDescription[]   @relation("DuplicateGroup")
  parent      JobDescription?    @relation("VersionHistory", fields: [parentId], references: [id])
  versions    JobDescription[]   @relation("VersionHistory")
  user        User               @relation(fields: [userId], references: [id])
  categories  TemplateCategory[] @relation("JobDescriptionToTemplateCategory")
  // Add relation to Competency for integration (optional)
  competencies Competency[] @relation("JobDescriptionToCompetency")

  @@index([userId])
  @@index([contentHash])
  @@index([parentId])
  @@index([canonicalId])
}

model TemplateCategory {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  color       String?          @default("#94a3b8")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  templates   JobDescription[] @relation("JobDescriptionToTemplateCategory")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("todo")
  priority    String    @default("medium")
  dueDate     DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  tags        TaskTag[]

  @@index([userId])
}

model TaskTag {
  id        String   @id @default(cuid())
  name      String
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([name, taskId])
  @@index([taskId])
}

model TrainingPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  objectives  String[]
  content     String
  duration    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model LearningContent {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  type        String
  category    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CompetencyFramework {
  id          String       @id @default(cuid())
  name        String
  description String?      @db.Text
  industry    String       // Keep for backward compatibility
  jobFunction String
  roleLevel   String
  isPublic    Boolean      @default(false)
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  competencies Competency[]
  // New field for industry reference
  industryId  String?
  industryRef Industry?    @relation(fields: [industryId], references: [id])

  @@index([userId])
  @@index([industryId])
}

model Competency {
  id            String            @id @default(cuid())
  name          String
  description   String            @db.Text
  businessImpact String           @db.Text
  type          String
  frameworkId   String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  framework     CompetencyFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  levels        CompetencyLevel[]
  // New fields for organizational reference data
  categoryId    String?
  category      CompetencyCategory? @relation(fields: [categoryId], references: [id])
  industryId    String?
  industry      Industry? @relation(fields: [industryId], references: [id])
  // Relations for integration with other tools
  roleCompetencyLevels RoleCompetencyLevel[]
  source        String?  // e.g., "JD_EXTRACTED", "USER_CREATED", "SYSTEM"
  sourceJdId    String?  // If extracted from a JD, the ID of that JD
  // Add relation to JobDescription
  jobDescriptions JobDescription[] @relation("JobDescriptionToCompetency")

  @@index([frameworkId])
  @@index([categoryId])
  @@index([industryId])
}

model CompetencyLevel {
  id                    String     @id @default(cuid())
  name                  String
  description           String     @db.Text
  levelOrder            Int
  behavioralIndicators  String[]
  developmentSuggestions String[]
  competencyId          String
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  competency            Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)

  @@index([competencyId])
}

// Organizational Reference Data Models
model CompetencyCategory {
  id            String       @id @default(cuid())
  name          String       @unique
  description   String       @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  competencies  Competency[] // Relation to competencies in this category
}

model JobLevel {
  id            String       @id @default(cuid())
  name          String       // e.g., "Entry", "Associate", "Senior", "Lead", "Principal"
  code          String?      // e.g., "L1", "L2", "L3", etc.
  description   String       @db.Text
  order         Int          // For sorting levels in the correct order
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  jobTitles     JobTitle[]
  matrixRoles   MatrixRole[]
}

model JobFamily {
  id            String       @id @default(cuid())
  name          String       // e.g., "Engineering", "Marketing", "Sales"
  description   String       @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  jobTitles     JobTitle[]
}

model JobTitle {
  id                String            @id @default(cuid())
  title             String
  description       String            @db.Text
  jobFamilyId       String
  jobFamily         JobFamily         @relation(fields: [jobFamilyId], references: [id])
  jobLevelId        String
  jobLevel          JobLevel          @relation(fields: [jobLevelId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  matrixRoles       MatrixRole[]

  @@index([jobFamilyId])
  @@index([jobLevelId])
}

model Department {
  id            String       @id @default(cuid())
  name          String
  description   String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Industry {
  id                  String                @id @default(cuid())
  name                String                @unique
  description         String?               @db.Text
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  competencies        Competency[]          // Relation to competencies in this industry
  competencyFrameworks CompetencyFramework[] // Relation to frameworks in this industry
  competencyMatrices  CompetencyMatrix[]
}

// Competency Matrix Models
model CompetencyMatrix {
  id            String       @id @default(cuid())
  name          String
  description   String       @db.Text
  industryId    String?
  industry      Industry?    @relation(fields: [industryId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  roles         MatrixRole[]
  isPublic      Boolean      @default(false)

  @@index([userId])
  @@index([industryId])
}

model MatrixRole {
  id                String                @id @default(cuid())
  title             String
  description       String                @db.Text
  matrixId          String
  matrix            CompetencyMatrix      @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  competencyLevels  RoleCompetencyLevel[]
  jobTitleId        String?
  jobTitle          JobTitle?             @relation(fields: [jobTitleId], references: [id])
  jobLevelId        String?
  jobLevel          JobLevel?             @relation(fields: [jobLevelId], references: [id])

  @@index([matrixId])
  @@index([jobTitleId])
  @@index([jobLevelId])
}

model RoleCompetencyLevel {
  id            String       @id @default(cuid())
  roleId        String
  role          MatrixRole   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  competencyId  String
  competency    Competency   @relation(fields: [competencyId], references: [id])
  levelRequired String       // References the level name in CompetencyLevel
  
  @@index([roleId])
  @@index([competencyId])
}

model ChatMessage {
  id        String         @id @default(cuid())
  content   String
  type      String
  userId    String
  ticketId  String?
  createdAt DateTime       @default(now())
  ticket    SupportTicket? @relation(fields: [ticketId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([ticketId])
}

model SupportTicket {
  id          String        @id @default(cuid())
  title       String
  description String
  status      String        @default("open")
  priority    String        @default("medium")
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  messages    ChatMessage[]
  user        User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Subscription {
  id        String    @id @default(cuid())
  type      String
  status    String    @default("active")
  startDate DateTime  @default(now())
  endDate   DateTime?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payments  Payment[]
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Payment {
  id             String        @id @default(cuid())
  amount         Float
  currency       String        @default("USD")
  status         String
  paymentMethod  String
  userId         String
  subscriptionId String?
  createdAt      DateTime      @default(now())
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([subscriptionId])
}

model ContactSubmission {
  id            String                  @id @default(cuid())
  name          String
  email         String
  subject       String
  company       String?
  phone         String?
  inquiryType   String
  message       String                  @db.Text
  status        String                  @default("new") // new, in-progress, resolved
  notes         String?                 @db.Text
  assignedTo    String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  lastRepliedAt DateTime?
  replies       ContactSubmissionReply[]

  @@index([status])
  @@index([inquiryType])
  @@index([createdAt])
}

model ContactSubmissionReply {
  id           String           @id @default(cuid())
  submissionId String
  subject      String
  message      String           @db.Text
  sentBy       String
  sentAt       DateTime         @default(now())
  submission   ContactSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([sentAt])
}
