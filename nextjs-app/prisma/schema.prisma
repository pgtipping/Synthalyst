generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String                        @id @default(cuid())
  name                String?
  email               String                        @unique
  emailVerified       DateTime?
  image               String?
  role                String                        @default("USER")
  bio                 String?
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
  password            String?
  accounts            Account[]
  chatMessages        ChatMessage[]
  comments            Comment[]
  competencies        CompetencyFramework[]
  frameworkFeedback   CompetencyFrameworkFeedback[] @relation("UserToFrameworkFeedback")
  appFeedback         AppFeedback[]                 @relation("UserToAppFeedback")
  competencyMatrices  CompetencyMatrix[]
  documents           Document[]
  jobDescriptions     JobDescription[]
  learningContent     LearningContent[]
  newsletterTemplates NewsletterTemplate[]
  payments            Payment[]
  posts               Post[]
  profile             Profile?
  sessions            Session[]
  subscriptions       Subscription[]
  supportTickets      SupportTicket[]
  tasks               Task[]
  templates           Template[]
  trainingPlans       TrainingPlan[]
  preferences         UserPreferences?
}

model Profile {
  id        String   @id @default(cuid())
  bio       String?
  company   String?
  position  String?
  website   String?
  location  String?
  skills    String[]
  interests String[]
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id            String   @id @default(cuid())
  theme         String   @default("light")
  notifications Boolean  @default(true)
  language      String   @default("en")
  userId        String   @unique
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id         String     @id @default(cuid())
  title      String
  slug       String     @unique
  content    String
  excerpt    String?
  coverImage String?
  published  Boolean    @default(false)
  featured   Boolean    @default(false)
  views      Int        @default(0)
  likes      Int        @default(0)
  authorId   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  comments   Comment[]
  author     User       @relation(fields: [authorId], references: [id])
  categories Category[] @relation("CategoryToPost")
  tags       Tag[]      @relation("PostToTag")
  Post_A     Post[]     @relation("RelatedPosts")
  Post_B     Post[]     @relation("RelatedPosts")

  @@index([authorId])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]   @relation("CategoryToPost")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToTag")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  authorId  String
  postId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([postId])
  @@index([parentId])
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  type        String
  format      String
  downloadUrl String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  category    String
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model JobDescription {
  id           String             @id @default(cuid())
  title        String
  content      String
  industry     String?
  level        String?
  skills       String[]
  userId       String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  contentHash  String
  isLatest     Boolean            @default(true)
  parentId     String?
  version      Int                @default(1)
  canonicalId  String?
  canonical    JobDescription?    @relation("DuplicateGroup", fields: [canonicalId], references: [id])
  duplicates   JobDescription[]   @relation("DuplicateGroup")
  parent       JobDescription?    @relation("VersionHistory", fields: [parentId], references: [id])
  versions     JobDescription[]   @relation("VersionHistory")
  user         User               @relation(fields: [userId], references: [id])
  competencies Competency[]       @relation("JobDescriptionToCompetency")
  categories   TemplateCategory[] @relation("JobDescriptionToTemplateCategory")

  @@index([userId])
  @@index([contentHash])
  @@index([parentId])
  @@index([canonicalId])
}

model TemplateCategory {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  color       String?          @default("#94a3b8")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  templates   JobDescription[] @relation("JobDescriptionToTemplateCategory")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("todo")
  priority    String    @default("medium")
  dueDate     DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  tags        TaskTag[]

  @@index([userId])
}

model TaskTag {
  id        String   @id @default(cuid())
  name      String
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([name, taskId])
  @@index([taskId])
}

model TrainingPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  objectives  String[]
  content     String
  duration    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model LearningContent {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  type        String
  category    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CompetencyFramework {
  id            String                        @id @default(cuid())
  description   String?
  industry      String
  userId        String
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
  industryId    String?
  isPublic      Boolean                       @default(false)
  jobFunction   String
  name          String
  roleLevel     String
  averageRating Float?
  feedbackCount Int                           @default(0)
  competencies  Competency[]
  industryRef   Industry?                     @relation(fields: [industryId], references: [id])
  user          User                          @relation(fields: [userId], references: [id])
  feedback      CompetencyFrameworkFeedback[]

  @@index([userId])
  @@index([industryId])
}

model Competency {
  id                   String                @id @default(cuid())
  name                 String
  description          String
  businessImpact       String
  type                 String
  frameworkId          String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  categoryId           String?
  industryId           String?
  source               String?
  sourceJdId           String?
  category             CompetencyCategory?   @relation(fields: [categoryId], references: [id])
  framework            CompetencyFramework   @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  industry             Industry?             @relation(fields: [industryId], references: [id])
  levels               CompetencyLevel[]
  roleCompetencyLevels RoleCompetencyLevel[]
  jobDescriptions      JobDescription[]      @relation("JobDescriptionToCompetency")

  @@index([frameworkId])
  @@index([categoryId])
  @@index([industryId])
}

model CompetencyLevel {
  id                     String     @id @default(cuid())
  name                   String
  description            String
  levelOrder             Int
  behavioralIndicators   String[]
  developmentSuggestions String[]
  competencyId           String
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  competency             Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)

  @@index([competencyId])
}

model CompetencyCategory {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  competencies Competency[]
}

model JobLevel {
  id          String       @id @default(cuid())
  name        String
  code        String?
  description String
  order       Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  jobTitles   JobTitle[]
  matrixRoles MatrixRole[]
}

model JobFamily {
  id          String     @id @default(cuid())
  name        String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  jobTitles   JobTitle[]
}

model JobTitle {
  id          String       @id @default(cuid())
  title       String
  description String
  jobFamilyId String
  jobLevelId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  jobFamily   JobFamily    @relation(fields: [jobFamilyId], references: [id])
  jobLevel    JobLevel     @relation(fields: [jobLevelId], references: [id])
  matrixRoles MatrixRole[]

  @@index([jobFamilyId])
  @@index([jobLevelId])
}

model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Industry {
  id                   String                @id @default(cuid())
  name                 String                @unique
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  competencies         Competency[]
  competencyFrameworks CompetencyFramework[]
  competencyMatrices   CompetencyMatrix[]
}

model CompetencyMatrix {
  id          String       @id @default(cuid())
  name        String
  description String
  industryId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  isPublic    Boolean      @default(false)
  industry    Industry?    @relation(fields: [industryId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  roles       MatrixRole[]

  @@index([userId])
  @@index([industryId])
}

model MatrixRole {
  id               String                @id @default(cuid())
  title            String
  description      String
  matrixId         String
  jobTitleId       String?
  jobLevelId       String?
  jobLevel         JobLevel?             @relation(fields: [jobLevelId], references: [id])
  jobTitle         JobTitle?             @relation(fields: [jobTitleId], references: [id])
  matrix           CompetencyMatrix      @relation(fields: [matrixId], references: [id], onDelete: Cascade)
  competencyLevels RoleCompetencyLevel[]

  @@index([matrixId])
  @@index([jobTitleId])
  @@index([jobLevelId])
}

model RoleCompetencyLevel {
  id            String     @id @default(cuid())
  roleId        String
  competencyId  String
  levelRequired String
  competency    Competency @relation(fields: [competencyId], references: [id])
  role          MatrixRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([roleId])
  @@index([competencyId])
}

model ChatMessage {
  id        String         @id @default(cuid())
  content   String
  type      String
  userId    String
  ticketId  String?
  createdAt DateTime       @default(now())
  ticket    SupportTicket? @relation(fields: [ticketId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([ticketId])
}

model SupportTicket {
  id          String        @id @default(cuid())
  title       String
  description String
  status      String        @default("open")
  priority    String        @default("medium")
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  messages    ChatMessage[]
  user        User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Subscription {
  id        String    @id @default(cuid())
  type      String
  status    String    @default("active")
  startDate DateTime  @default(now())
  endDate   DateTime?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payments  Payment[]
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Payment {
  id             String        @id @default(cuid())
  amount         Float
  currency       String        @default("USD")
  status         String
  paymentMethod  String
  userId         String
  subscriptionId String?
  createdAt      DateTime      @default(now())
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([subscriptionId])
}

model ContactSubmission {
  id            String                   @id @default(cuid())
  name          String
  email         String
  subject       String
  company       String?
  phone         String?
  inquiryType   String
  message       String
  status        String                   @default("new")
  source        String?                  @default("WEBSITE")
  notes         String?
  assignedTo    String?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  lastRepliedAt DateTime?
  replies       ContactSubmissionReply[]

  @@index([status])
  @@index([inquiryType])
  @@index([createdAt])
  @@index([source])
}

model ContactSubmissionReply {
  id                  String            @id @default(uuid())
  contactSubmissionId String
  content             String
  createdAt           DateTime          @default(now())
  reference           String?
  contactSubmission   ContactSubmission @relation(fields: [contactSubmissionId], references: [id], onDelete: Cascade)

  @@index([contactSubmissionId])
}

model CompetencyFrameworkFeedback {
  id                       String              @id @default(cuid())
  rating                   Int
  feedback                 String?
  isPublic                 Boolean             @default(false)
  llmQualityFeedback       String?
  llmImprovementSuggestion String?
  frameworkId              String
  userId                   String?
  createdAt                DateTime            @default(now())
  framework                CompetencyFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  user                     User?               @relation("UserToFrameworkFeedback", fields: [userId], references: [id])
}

model NewsletterSubscriber {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  tags          String[]  @default([])
  status        String    @default("pending") // pending, confirmed, unsubscribed, bounced
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  confirmed     Boolean   @default(false)
  confirmedAt   DateTime?
  unsubscribed  Boolean   @default(false)
  unsubscribedAt DateTime?
  source        String?
  token         String?
  tokenExpiry   DateTime?
  openEvents    NewsletterOpenEvent[]
  clickEvents   NewsletterClickEvent[]
  bounceEvents  NewsletterBounceEvent[]
  unsubscribeEvents NewsletterUnsubscribeEvent[]
}

model NewsletterTemplate {
  id          String   @id @default(cuid())
  name        String
  subject     String
  content     String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([createdById])
}

model NewsletterSend {
  id             String           @id @default(cuid())
  subject        String
  content        String?
  recipientCount Int
  sentBy         String
  filter         String
  status         String           @default("pending")
  opens          Int              @default(0)
  clicks         Int              @default(0)
  bounces        Int              @default(0)
  unsubscribes   Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  replies        NewsletterReply[]
  openEvents     NewsletterOpenEvent[]
  clickEvents    NewsletterClickEvent[]
  bounceEvents   NewsletterBounceEvent[]
  unsubscribeEvents NewsletterUnsubscribeEvent[]
}

model NewsletterReply {
  id        String         @id @default(cuid())
  content   String
  sendId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  send      NewsletterSend @relation(fields: [sendId], references: [id])

  @@index([sendId])
}

// New models for analytics

model NewsletterOpenEvent {
  id           String               @id @default(cuid())
  newsletterId String
  subscriberId String
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime             @default(now())
  newsletter   NewsletterSend       @relation(fields: [newsletterId], references: [id])
  subscriber   NewsletterSubscriber @relation(fields: [subscriberId], references: [id])

  @@index([newsletterId])
  @@index([subscriberId])
}

model NewsletterClickEvent {
  id           String               @id @default(cuid())
  newsletterId String
  subscriberId String
  url          String
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime             @default(now())
  newsletter   NewsletterSend       @relation(fields: [newsletterId], references: [id])
  subscriber   NewsletterSubscriber @relation(fields: [subscriberId], references: [id])

  @@index([newsletterId])
  @@index([subscriberId])
  @@index([url])
}

model NewsletterBounceEvent {
  id           String               @id @default(cuid())
  newsletterId String
  subscriberId String
  reason       String?
  createdAt    DateTime             @default(now())
  newsletter   NewsletterSend       @relation(fields: [newsletterId], references: [id])
  subscriber   NewsletterSubscriber @relation(fields: [subscriberId], references: [id])

  @@index([newsletterId])
  @@index([subscriberId])
}

model NewsletterUnsubscribeEvent {
  id            String    @id @default(cuid())
  subscriberId  String
  sendId        String?
  createdAt     DateTime  @default(now())
  ipAddress     String?
  userAgent     String?
  subscriber    NewsletterSubscriber @relation(fields: [subscriberId], references: [id])
  send          NewsletterSend?      @relation(fields: [sendId], references: [id])

  @@index([subscriberId])
  @@index([sendId])
}

// Inbound Email Processing

model InboundEmail {
  id              String    @id @default(cuid())
  fromEmail       String
  fromFull        String
  to              String
  subject         String
  textContent     String?   @db.Text
  htmlContent     String?   @db.Text
  attachmentCount Int       @default(0)
  processed       Boolean   @default(false)
  processedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  notes           String?   @db.Text
  
  @@index([fromEmail])
  @@index([processed])
}

model AppFeedback {
  id          String    @id @default(cuid())
  appName     String    // Name of the app being rated
  rating      Int       // Rating from 1-5
  feedback    String?   // Optional feedback text
  userId      String?   // Optional user ID if the user is logged in
  createdAt   DateTime  @default(now())
  user        User?     @relation("UserToAppFeedback", fields: [userId], references: [id])

  @@index([appName])
  @@index([userId])
}
