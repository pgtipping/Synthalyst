# Project Intelligence

## Primary Tech Stack

- Next.js
- React 19
- shadcn/ui
- Tailwind CSS
- Vercel

## Target Audience

- General public

## Development Setup

- VSCode
- Node.js
- npm

## Deployment

- Vercel

## Challenges

- Ensuring the "use client" declaration is present in client-side components.
- Refactoring the existing HTML and CSS to use Tailwind CSS classes.

## Solutions

- Ensured the "use client" declaration is present in the `Header.tsx` component.
- Refactored the `Header.tsx` component to use Tailwind CSS classes.

// Testing Rules

1. Always clean up database using cleanupDatabaseWithRetry()
2. Follow table cleanup order: junction tables first, then children, then parents
3. Use transactions for atomic operations
4. Validate entity relationships before operations
5. Handle deadlocks with exponential backoff
6. Log database state for debugging

// Error Handling Rules

1. Use proper TypeScript error typing
2. Handle deadlock errors (code 40P01) specifically
3. Implement retry with exponential backoff
4. Include detailed error context
5. Log error stack traces in development

// Database Rules

1. Terminate idle connections before cleanup
2. Clean tables in correct order
3. Use transactions for related operations
4. Validate foreign key constraints
5. Handle deadlocks properly
6. Log database operations

// Validation Rules

1. Validate entity relationships
2. Check foreign key constraints
3. Use transactions for atomic operations
4. Include detailed error messages
5. Log validation failures
6. Handle edge cases properly

// Debugging Rules

1. Use logDatabaseState() for database issues
2. Log request and response data in tests
3. Include error details in logs
4. Use proper error status codes
5. Add context to error messages
6. Log stack traces in development

// Test Data Rules

1. Use helper functions for test data creation
2. Clean up data before each test
3. Use meaningful test data
4. Include all required fields
5. Handle validation properly
6. Log data state for debugging

// Security Rules

1. Never commit sensitive data or API keys
2. Use .env.example for environment variable documentation
3. Keep .env file in .gitignore
4. Document security best practices
5. Review security measures regularly
6. Follow OWASP security guidelines

// Package Management Rules

1. Install all packages in the nextjs-app directory
2. Never install packages in the root directory
3. Use package-lock.json for dependency versioning
4. Keep node_modules in .gitignore
5. Document all dependencies in package.json
6. Use exact versions for critical dependencies

// Environment File Rules

1. Keep all environment files in nextjs-app directory
2. Never create environment files in root directory
3. Use .env.example for documenting required variables
4. Keep sensitive values out of version control
5. Document all environment variables
6. Use descriptive variable names

// Git Management Rules

1. Keep .gitignore file only in nextjs-app directory
2. Never create .gitignore in root directory
3. Maintain comprehensive ignore patterns
4. Follow Git best practices
5. Keep repository clean and organized
6. Use meaningful commit messages

# Cursor Rules

## Project Patterns

### Form State Management

- Use React Hook Form for complex forms
- Implement Zod validation schemas
- Keep form state local unless needed globally
- Use controlled components for immediate feedback

### LLM Integration

- Always process LLM calls server-side
- Validate LLM responses against TypeScript interfaces
- Implement comprehensive error handling
- Log LLM inputs and outputs for debugging

### Database Operations

- Use Prisma for all database operations
- Implement proper error handling and validation
- Use transactions for complex operations
- Keep database schema in sync with TypeScript types

### Authentication

- Require authentication for all protected routes
- Use NextAuth.js for authentication
- Store sensitive data server-side
- Implement proper session handling

### Component Structure

- Use feature-based directory organization
- Implement shared components in /components
- Leverage shadcn/ui components as base UI elements
- Keep business logic in separate files
- Use TypeScript interfaces for props

### Error Handling

- Implement consistent error messages
- Use toast notifications for user feedback
- Log errors server-side
- Provide fallback UI for errors

### State Management

- Use React Query for server state
- Implement Context for shared state
- Keep state as close to usage as possible
- Use proper TypeScript types

### Testing

- Write unit tests for utilities
- Implement integration tests for API routes
- Test components in isolation
- Use proper test data

### React Patterns

- Use Actions for data mutations
- Implement useOptimistic for better UX
- Leverage useActionState for forms
- Use resource loading patterns
- Follow React 19 best practices

## File Organization

### Feature Modules

```
/app
  /{feature}
    /components
    /api
    page.tsx
    layout.tsx
    types.ts
```

### Shared Components

```
/components
  /ui
  /shared
  /layouts
```

### API Routes

```
/api
  /{feature}
    /route.ts
    /[id]/route.ts
```

## Naming Conventions

### Components

- PascalCase for component names
- Suffix with type (Button, Form, List)
- Include feature prefix if specific

### Files

- camelCase for utility files
- PascalCase for component files
- Use descriptive names

### Functions

- camelCase for function names
- Use verb prefixes (get, set, handle)
- Be descriptive about purpose

### Variables

- camelCase for variables
- Use meaningful names
- Avoid abbreviations

## Code Style

### TypeScript

- Use strict mode
- Define interfaces for all props
- Use proper type imports
- Avoid any type

### React

- Use functional components
- Implement proper hooks
- Keep components focused
- Use proper prop types

### CSS

- Use Tailwind classes
- Extend shadcn/ui theme variables
- Implement responsive design
- Follow mobile-first approach
- Use CSS variables for themes

## Best Practices

### Performance

- Implement proper loading states
- Use proper caching strategies
- Optimize database queries
- Minimize bundle size

### Security

- Validate all inputs
- Sanitize user data
- Implement proper authentication
- Use proper error handling

### Accessibility

- Use proper ARIA labels
- Implement keyboard navigation
- Follow WCAG guidelines
- Test with screen readers

### Documentation

- Document complex functions
- Include usage examples
- Keep README updated
- Document API endpoints

## Current Project Rules

### JD Developer

- Use Groq SDK for LLM calls
- Implement proper form validation
- Store templates in database
- Use proper error handling

### 2Do Task Manager

- Implement voice recognition safely
- Use proper calendar integration
- Store tasks in database
- Implement proper UI feedback

### Training Plan Creator

- Follow same patterns as JD Developer
- Implement proper curriculum structure
- Use proper progress tracking
- Store plans in database
